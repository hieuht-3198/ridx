import { AV_ADJACENT_NETWORK, AV_ALL, AV_LOCAL, AV_NETWORK, AV_PHYSICAL, MAX_INT, PR_ALL } from '@/shared/constant';
import ProTable from '@ant-design/pro-table';
import { Affix, Button, Form, Input, message, Select, Table, Typography } from 'antd';
import React, { useContext, useEffect, useRef, useState } from 'react';
import { getVulsInAssetInDeploymentScenario, selectVulInAssetOnAttackGraph } from '../../service';
const { Paragraph } = Typography;

import './index.css';



const VulnerabiliesAnalysisPerAsset = ({ asset_id, deployment_scenario_id, activeCVEs, setActiveCVEs }) => {

    const [dataSource, setDataSource] = useState([])
    const [selectedRowKeys, setSelectedRowKeys] = useState(activeCVEs[asset_id]);
    const [saveButtonState, setSaveButtonState] = useState(true)

    const columns = [
        {
            title: 'CVE ID',
            dataIndex: 'cve_id',
            width: '20%',
            
        },
        {
            title: 'Description',
            dataIndex: 'description',
            width: '40%',
            hideInForm: true,
            hideInSearch: true,
            render: (val) => (
                <Paragraph ellipsis={{ tooltip: val, rows: 3 }}>
                    {val}
                </Paragraph>
            )
        },
        {
            title: 'CWE ID',
            dataIndex: 'cwe_id',
            width: '20%',
            
        },
        {
            title: 'Exploitability',
            dataIndex: 'exploitabilityScore',
            width: '10%',
            editable: true,
        },
        {
            title: 'Attack vector',
            dataIndex: 'attack_vector',
            width: '10%',
            editable: true,
        },
        {
            title: 'Prerequisite',
            dataIndex: 'prerequisite',
            width: '10%',
            editable: true,
        },
        {
            title: 'Postcondition',
            dataIndex: 'postcondition',
            width: '10%',
            editable: true,
        },

    ];

    const rowSelection = {
        selectedRowKeys,
        onChange: onSelectChange,
    };

    const onSelectChange = (newSelectedRowKeys) => {
        setSelectedRowKeys(newSelectedRowKeys);
        setSaveButtonState(false)     
    };

    const handleSaveCVEInAsset = async () => {
        const res = await selectVulInAssetOnAttackGraph(deployment_scenario_id, asset_id, {
            cves: selectedRowKeys
        })
        if (res) {
            setActiveCVEs({
                ...activeCVEs,
                [asset_id]: selectedRowKeys
            })
            message.success('Save done!')
        }
    }

    useEffect(() => {
        const fetchData = async () => {
            const res = await getVulsInAssetInDeploymentScenario(deployment_scenario_id, asset_id, {
                pageSize: MAX_INT
            })
            const v = res.data.map((item) => {
                return {
                    key: item.id,
                    ...item,
                    exploitabilityScore: item?.impact?.baseMetricV2?.exploitabilityScore,
                    prerequisite: item?.condition?.preCondition,
                    postcondition: item?.condition?.postCondition,
            }})
            setDataSource(v)
            setSaveButtonState(true)
        }
        fetchData()
    }, [])

    return (
        <div>
            <Table
                rowKey="cve_id"
                toolBarRender={false}
                rowSelection={{
                    selectedRowKeys: selectedRowKeys,
                    onChange: onSelectChange,
                    columnTitle: <></>
                }}
                rowClassName={() => 'editable-row'}
                bordered
                dataSource={dataSource}
                columns={columns}
            />
            <Affix style={{position: 'fixed', right: 50, bottom: 50, zIndex: 1000}} >
                <Button type="primary" 
                    onClick={handleSaveCVEInAsset} 
                    disabled={saveButtonState || selectedRowKeys.length === 0}
                >
                    Save
                </Button>
            </Affix>
        </div>
    );
}
export default VulnerabiliesAnalysisPerAsset